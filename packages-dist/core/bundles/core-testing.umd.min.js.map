{"version":3,"file":"core-testing.umd.min.js","sources":["../../../../packages/core/testing/src/async.ts","../../../../packages/core/testing/src/component_fixture.ts","../../../../packages/core/testing/src/fake_async.ts","../../../../packages/core/testing/src/test_bed.ts","../../../../packages/core/testing/src/before_each.ts","../../../../packages/core/testing/src/async_test_completer.ts","../../../../packages/core/testing/src/test_compiler.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\ndeclare var global: any;\n\nconst _global = <any>(typeof window === 'undefined' ? global : window);\n\n/**\n * Wraps a test function in an asynchronous test zone. The test will automatically\n * complete when all asynchronous calls within this zone are done. Can be used\n * to wrap an {@link inject} call.\n *\n * Example:\n *\n * ```\n * it('...', async(inject([AClass], (object) => {\n *   object.doSomething.then(() => {\n *     expect(...);\n *   })\n * });\n * ```\n *\n * @stable\n */\nexport function async(fn: Function): (done: any) => any {\n  // If we're running using the Jasmine test framework, adapt to call the 'done'\n  // function when asynchronous activity is finished.\n  if (_global.jasmine) {\n    // Not using an arrow function to preserve context passed from call site\n    return function(done: any) {\n      if (!done) {\n        // if we run beforeEach in @angular/core/testing/testing_internal then we get no done\n        // fake it here and assume sync.\n        done = function() {};\n        done.fail = function(e: any) { throw e; };\n      }\n      runInTestZone(fn, this, done, (err: any) => {\n        if (typeof err === 'string') {\n          return done.fail(new Error(<string>err));\n        } else {\n          done.fail(err);\n        }\n      });\n    };\n  }\n  // Otherwise, return a promise which will resolve when asynchronous activity\n  // is finished. This will be correctly consumed by the Mocha framework with\n  // it('...', async(myFn)); or can be used in a custom framework.\n  // Not using an arrow function to preserve context passed from call site\n  return function() {\n    return new Promise<void>((finishCallback, failCallback) => {\n      runInTestZone(fn, this, finishCallback, failCallback);\n    });\n  };\n}\n\nfunction runInTestZone(\n    fn: Function, context: any, finishCallback: Function, failCallback: Function) {\n  const currentZone = Zone.current;\n  const AsyncTestZoneSpec = (Zone as any)['AsyncTestZoneSpec'];\n  if (AsyncTestZoneSpec === undefined) {\n    throw new Error(\n        'AsyncTestZoneSpec is needed for the async() test helper but could not be found. ' +\n        'Please make sure that your environment includes zone.js/dist/async-test.js');\n  }\n  const ProxyZoneSpec = (Zone as any)['ProxyZoneSpec'] as {\n    get(): {setDelegate(spec: ZoneSpec): void; getDelegate(): ZoneSpec;};\n    assertPresent: () => void;\n  };\n  if (ProxyZoneSpec === undefined) {\n    throw new Error(\n        'ProxyZoneSpec is needed for the async() test helper but could not be found. ' +\n        'Please make sure that your environment includes zone.js/dist/proxy.js');\n  }\n  const proxyZoneSpec = ProxyZoneSpec.get();\n  ProxyZoneSpec.assertPresent();\n  // We need to create the AsyncTestZoneSpec outside the ProxyZone.\n  // If we do it in ProxyZone then we will get to infinite recursion.\n  const proxyZone = Zone.current.getZoneWith('ProxyZoneSpec');\n  const previousDelegate = proxyZoneSpec.getDelegate();\n  proxyZone.parent.run(() => {\n    const testZoneSpec: ZoneSpec = new AsyncTestZoneSpec(\n        () => {\n          // Need to restore the original zone.\n          currentZone.run(() => {\n            if (proxyZoneSpec.getDelegate() == testZoneSpec) {\n              // Only reset the zone spec if it's sill this one. Otherwise, assume it's OK.\n              proxyZoneSpec.setDelegate(previousDelegate);\n            }\n            finishCallback();\n          });\n        },\n        (error: any) => {\n          // Need to restore the original zone.\n          currentZone.run(() => {\n            if (proxyZoneSpec.getDelegate() == testZoneSpec) {\n              // Only reset the zone spec if it's sill this one. Otherwise, assume it's OK.\n              proxyZoneSpec.setDelegate(previousDelegate);\n            }\n            failCallback(error);\n          });\n        },\n        'test');\n    proxyZoneSpec.setDelegate(testZoneSpec);\n  });\n  return Zone.current.runGuarded(fn, context);\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectorRef, ComponentRef, DebugElement, ElementRef, NgZone, getDebugNode} from '@angular/core';\n\n\n/**\n * Fixture for debugging and testing a component.\n *\n * @stable\n */\nexport class ComponentFixture<T> {\n  /**\n   * The DebugElement associated with the root element of this component.\n   */\n  debugElement: DebugElement;\n\n  /**\n   * The instance of the root component class.\n   */\n  componentInstance: T;\n\n  /**\n   * The native element at the root of the component.\n   */\n  nativeElement: any;\n\n  /**\n   * The ElementRef for the element at the root of the component.\n   */\n  elementRef: ElementRef;\n\n  /**\n   * The ChangeDetectorRef for the component\n   */\n  changeDetectorRef: ChangeDetectorRef;\n\n  private _isStable: boolean = true;\n  private _isDestroyed: boolean = false;\n  private _resolve: (result: any) => void;\n  private _promise: Promise<any> = null;\n  private _onUnstableSubscription: any /** TODO #9100 */ = null;\n  private _onStableSubscription: any /** TODO #9100 */ = null;\n  private _onMicrotaskEmptySubscription: any /** TODO #9100 */ = null;\n  private _onErrorSubscription: any /** TODO #9100 */ = null;\n\n  constructor(\n      public componentRef: ComponentRef<T>, public ngZone: NgZone, private _autoDetect: boolean) {\n    this.changeDetectorRef = componentRef.changeDetectorRef;\n    this.elementRef = componentRef.location;\n    this.debugElement = <DebugElement>getDebugNode(this.elementRef.nativeElement);\n    this.componentInstance = componentRef.instance;\n    this.nativeElement = this.elementRef.nativeElement;\n    this.componentRef = componentRef;\n    this.ngZone = ngZone;\n\n    if (ngZone != null) {\n      this._onUnstableSubscription =\n          ngZone.onUnstable.subscribe({next: () => { this._isStable = false; }});\n      this._onMicrotaskEmptySubscription = ngZone.onMicrotaskEmpty.subscribe({\n        next: () => {\n          if (this._autoDetect) {\n            // Do a change detection run with checkNoChanges set to true to check\n            // there are no changes on the second run.\n            this.detectChanges(true);\n          }\n        }\n      });\n      this._onStableSubscription = ngZone.onStable.subscribe({\n        next: () => {\n          this._isStable = true;\n          // Check whether there is a pending whenStable() completer to resolve.\n          if (this._promise !== null) {\n            // If so check whether there are no pending macrotasks before resolving.\n            // Do this check in the next tick so that ngZone gets a chance to update the state of\n            // pending macrotasks.\n            scheduleMicroTask(() => {\n              if (!this.ngZone.hasPendingMacrotasks) {\n                if (this._promise !== null) {\n                  this._resolve(true);\n                  this._resolve = null;\n                  this._promise = null;\n                }\n              }\n            });\n          }\n        }\n      });\n\n      this._onErrorSubscription =\n          ngZone.onError.subscribe({next: (error: any) => { throw error; }});\n    }\n  }\n\n  private _tick(checkNoChanges: boolean) {\n    this.changeDetectorRef.detectChanges();\n    if (checkNoChanges) {\n      this.checkNoChanges();\n    }\n  }\n\n  /**\n   * Trigger a change detection cycle for the component.\n   */\n  detectChanges(checkNoChanges: boolean = true): void {\n    if (this.ngZone != null) {\n      // Run the change detection inside the NgZone so that any async tasks as part of the change\n      // detection are captured by the zone and can be waited for in isStable.\n      this.ngZone.run(() => { this._tick(checkNoChanges); });\n    } else {\n      // Running without zone. Just do the change detection.\n      this._tick(checkNoChanges);\n    }\n  }\n\n  /**\n   * Do a change detection run to make sure there were no changes.\n   */\n  checkNoChanges(): void { this.changeDetectorRef.checkNoChanges(); }\n\n  /**\n   * Set whether the fixture should autodetect changes.\n   *\n   * Also runs detectChanges once so that any existing change is detected.\n   */\n  autoDetectChanges(autoDetect: boolean = true) {\n    if (this.ngZone == null) {\n      throw new Error('Cannot call autoDetectChanges when ComponentFixtureNoNgZone is set');\n    }\n    this._autoDetect = autoDetect;\n    this.detectChanges();\n  }\n\n  /**\n   * Return whether the fixture is currently stable or has async tasks that have not been completed\n   * yet.\n   */\n  isStable(): boolean { return this._isStable && !this.ngZone.hasPendingMacrotasks; }\n\n  /**\n   * Get a promise that resolves when the fixture is stable.\n   *\n   * This can be used to resume testing after events have triggered asynchronous activity or\n   * asynchronous change detection.\n   */\n  whenStable(): Promise<any> {\n    if (this.isStable()) {\n      return Promise.resolve(false);\n    } else if (this._promise !== null) {\n      return this._promise;\n    } else {\n      this._promise = new Promise(res => { this._resolve = res; });\n      return this._promise;\n    }\n  }\n\n  /**\n   * Trigger component destruction.\n   */\n  destroy(): void {\n    if (!this._isDestroyed) {\n      this.componentRef.destroy();\n      if (this._onUnstableSubscription != null) {\n        this._onUnstableSubscription.unsubscribe();\n        this._onUnstableSubscription = null;\n      }\n      if (this._onStableSubscription != null) {\n        this._onStableSubscription.unsubscribe();\n        this._onStableSubscription = null;\n      }\n      if (this._onMicrotaskEmptySubscription != null) {\n        this._onMicrotaskEmptySubscription.unsubscribe();\n        this._onMicrotaskEmptySubscription = null;\n      }\n      if (this._onErrorSubscription != null) {\n        this._onErrorSubscription.unsubscribe();\n        this._onErrorSubscription = null;\n      }\n      this._isDestroyed = true;\n    }\n  }\n}\n\nfunction scheduleMicroTask(fn: Function) {\n  Zone.current.scheduleMicroTask('scheduleMicrotask', fn);\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nconst FakeAsyncTestZoneSpec = (Zone as any)['FakeAsyncTestZoneSpec'];\ntype ProxyZoneSpec = {\n  setDelegate(delegateSpec: ZoneSpec): void; getDelegate(): ZoneSpec; resetDelegate(): void;\n};\nconst ProxyZoneSpec: {get(): ProxyZoneSpec; assertPresent: () => ProxyZoneSpec} =\n    (Zone as any)['ProxyZoneSpec'];\n\nlet _fakeAsyncTestZoneSpec: any = null;\n\n/**\n * Clears out the shared fake async zone for a test.\n * To be called in a global `beforeEach`.\n *\n * @experimental\n */\nexport function resetFakeAsyncZone() {\n  _fakeAsyncTestZoneSpec = null;\n  ProxyZoneSpec.assertPresent().resetDelegate();\n}\n\nlet _inFakeAsyncCall = false;\n\n/**\n * Wraps a function to be executed in the fakeAsync zone:\n * - microtasks are manually executed by calling `flushMicrotasks()`,\n * - timers are synchronous, `tick()` simulates the asynchronous passage of time.\n *\n * If there are any pending timers at the end of the function, an exception will be thrown.\n *\n * Can be used to wrap inject() calls.\n *\n * ## Example\n *\n * {@example testing/ts/fake_async.ts region='basic'}\n *\n * @param fn\n * @returns {Function} The function wrapped to be executed in the fakeAsync zone\n *\n * @experimental\n */\nexport function fakeAsync(fn: Function): (...args: any[]) => any {\n  // Not using an arrow function to preserve context passed from call site\n  return function(...args: any[]) {\n    const proxyZoneSpec = ProxyZoneSpec.assertPresent();\n    if (_inFakeAsyncCall) {\n      throw new Error('fakeAsync() calls can not be nested');\n    }\n    _inFakeAsyncCall = true;\n    try {\n      if (!_fakeAsyncTestZoneSpec) {\n        if (proxyZoneSpec.getDelegate() instanceof FakeAsyncTestZoneSpec) {\n          throw new Error('fakeAsync() calls can not be nested');\n        }\n\n        _fakeAsyncTestZoneSpec = new FakeAsyncTestZoneSpec();\n      }\n\n      let res: any;\n      const lastProxyZoneSpec = proxyZoneSpec.getDelegate();\n      proxyZoneSpec.setDelegate(_fakeAsyncTestZoneSpec);\n      try {\n        res = fn.apply(this, args);\n        flushMicrotasks();\n      } finally {\n        proxyZoneSpec.setDelegate(lastProxyZoneSpec);\n      }\n\n      if (_fakeAsyncTestZoneSpec.pendingPeriodicTimers.length > 0) {\n        throw new Error(\n            `${_fakeAsyncTestZoneSpec.pendingPeriodicTimers.length} ` +\n            `periodic timer(s) still in the queue.`);\n      }\n\n      if (_fakeAsyncTestZoneSpec.pendingTimers.length > 0) {\n        throw new Error(\n            `${_fakeAsyncTestZoneSpec.pendingTimers.length} timer(s) still in the queue.`);\n      }\n      return res;\n    } finally {\n      _inFakeAsyncCall = false;\n      resetFakeAsyncZone();\n    }\n  };\n}\n\nfunction _getFakeAsyncZoneSpec(): any {\n  if (_fakeAsyncTestZoneSpec == null) {\n    throw new Error('The code should be running in the fakeAsync zone to call this function');\n  }\n  return _fakeAsyncTestZoneSpec;\n}\n\n/**\n * Simulates the asynchronous passage of time for the timers in the fakeAsync zone.\n *\n * The microtasks queue is drained at the very start of this function and after any timer callback\n * has been executed.\n *\n * ## Example\n *\n * {@example testing/ts/fake_async.ts region='basic'}\n *\n * @experimental\n */\nexport function tick(millis: number = 0): void {\n  _getFakeAsyncZoneSpec().tick(millis);\n}\n\n/**\n * Discard all remaining periodic tasks.\n *\n * @experimental\n */\nexport function discardPeriodicTasks(): void {\n  const zoneSpec = _getFakeAsyncZoneSpec();\n  const pendingTimers = zoneSpec.pendingPeriodicTimers;\n  zoneSpec.pendingPeriodicTimers.length = 0;\n}\n\n/**\n * Flush any pending microtasks.\n *\n * @experimental\n */\nexport function flushMicrotasks(): void {\n  _getFakeAsyncZoneSpec().flushMicrotasks();\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CompilerOptions, Component, Directive, InjectionToken, Injector, ModuleWithComponentFactories, NgModule, NgModuleRef, NgZone, Pipe, PlatformRef, Provider, ReflectiveInjector, SchemaMetadata, Type, ɵERROR_COMPONENT_TYPE, ɵstringify as stringify} from '@angular/core';\nimport {AsyncTestCompleter} from './async_test_completer';\nimport {ComponentFixture} from './component_fixture';\nimport {MetadataOverride} from './metadata_override';\nimport {TestingCompiler, TestingCompilerFactory} from './test_compiler';\n\nconst UNDEFINED = new Object();\n\n/**\n * An abstract class for inserting the root test component element in a platform independent way.\n *\n * @experimental\n */\nexport class TestComponentRenderer {\n  insertRootElement(rootElementId: string) {}\n}\n\nlet _nextRootElementId = 0;\n\n/**\n * @experimental\n */\nexport const ComponentFixtureAutoDetect =\n    new InjectionToken<boolean[]>('ComponentFixtureAutoDetect');\n\n/**\n * @experimental\n */\nexport const ComponentFixtureNoNgZone = new InjectionToken<boolean[]>('ComponentFixtureNoNgZone');\n\n/**\n * @experimental\n */\nexport type TestModuleMetadata = {\n  providers?: any[],\n  declarations?: any[],\n  imports?: any[],\n  schemas?: Array<SchemaMetadata|any[]>,\n};\n\n/**\n * @whatItDoes Configures and initializes environment for unit testing and provides methods for\n * creating components and services in unit tests.\n * @description\n *\n * TestBed is the primary api for writing unit tests for Angular applications and libraries.\n *\n * @stable\n */\nexport class TestBed implements Injector {\n  /**\n   * Initialize the environment for testing with a compiler factory, a PlatformRef, and an\n   * angular module. These are common to every test in the suite.\n   *\n   * This may only be called once, to set up the common providers for the current test\n   * suite on the current platform. If you absolutely need to change the providers,\n   * first use `resetTestEnvironment`.\n   *\n   * Test modules and platforms for individual platforms are available from\n   * '@angular/<platform_name>/testing'.\n   *\n   * @experimental\n   */\n  static initTestEnvironment(ngModule: Type<any>|Type<any>[], platform: PlatformRef): TestBed {\n    const testBed = getTestBed();\n    testBed.initTestEnvironment(ngModule, platform);\n    return testBed;\n  }\n\n  /**\n   * Reset the providers for the test injector.\n   *\n   * @experimental\n   */\n  static resetTestEnvironment() { getTestBed().resetTestEnvironment(); }\n\n  static resetTestingModule(): typeof TestBed {\n    getTestBed().resetTestingModule();\n    return TestBed;\n  }\n\n  /**\n   * Allows overriding default compiler providers and settings\n   * which are defined in test_injector.js\n   */\n  static configureCompiler(config: {providers?: any[]; useJit?: boolean;}): typeof TestBed {\n    getTestBed().configureCompiler(config);\n    return TestBed;\n  }\n\n  /**\n   * Allows overriding default providers, directives, pipes, modules of the test injector,\n   * which are defined in test_injector.js\n   */\n  static configureTestingModule(moduleDef: TestModuleMetadata): typeof TestBed {\n    getTestBed().configureTestingModule(moduleDef);\n    return TestBed;\n  }\n\n  /**\n   * Compile components with a `templateUrl` for the test's NgModule.\n   * It is necessary to call this function\n   * as fetching urls is asynchronous.\n   */\n  static compileComponents(): Promise<any> { return getTestBed().compileComponents(); }\n\n  static overrideModule(ngModule: Type<any>, override: MetadataOverride<NgModule>): typeof TestBed {\n    getTestBed().overrideModule(ngModule, override);\n    return TestBed;\n  }\n\n  static overrideComponent(component: Type<any>, override: MetadataOverride<Component>):\n      typeof TestBed {\n    getTestBed().overrideComponent(component, override);\n    return TestBed;\n  }\n\n  static overrideDirective(directive: Type<any>, override: MetadataOverride<Directive>):\n      typeof TestBed {\n    getTestBed().overrideDirective(directive, override);\n    return TestBed;\n  }\n\n  static overridePipe(pipe: Type<any>, override: MetadataOverride<Pipe>): typeof TestBed {\n    getTestBed().overridePipe(pipe, override);\n    return TestBed;\n  }\n\n  static overrideTemplate(component: Type<any>, template: string): typeof TestBed {\n    getTestBed().overrideComponent(component, {set: {template, templateUrl: null}});\n    return TestBed;\n  }\n\n  static get(token: any, notFoundValue: any = Injector.THROW_IF_NOT_FOUND) {\n    return getTestBed().get(token, notFoundValue);\n  }\n\n  static createComponent<T>(component: Type<T>): ComponentFixture<T> {\n    return getTestBed().createComponent(component);\n  }\n\n  private _instantiated: boolean = false;\n\n  private _compiler: TestingCompiler = null;\n  private _moduleRef: NgModuleRef<any> = null;\n  private _moduleWithComponentFactories: ModuleWithComponentFactories<any> = null;\n\n  private _compilerOptions: CompilerOptions[] = [];\n\n  private _moduleOverrides: [Type<any>, MetadataOverride<NgModule>][] = [];\n  private _componentOverrides: [Type<any>, MetadataOverride<Component>][] = [];\n  private _directiveOverrides: [Type<any>, MetadataOverride<Directive>][] = [];\n  private _pipeOverrides: [Type<any>, MetadataOverride<Pipe>][] = [];\n\n  private _providers: Provider[] = [];\n  private _declarations: Array<Type<any>|any[]|any> = [];\n  private _imports: Array<Type<any>|any[]|any> = [];\n  private _schemas: Array<SchemaMetadata|any[]> = [];\n  private _activeFixtures: ComponentFixture<any>[] = [];\n\n  /**\n   * Initialize the environment for testing with a compiler factory, a PlatformRef, and an\n   * angular module. These are common to every test in the suite.\n   *\n   * This may only be called once, to set up the common providers for the current test\n   * suite on the current platform. If you absolutely need to change the providers,\n   * first use `resetTestEnvironment`.\n   *\n   * Test modules and platforms for individual platforms are available from\n   * '@angular/<platform_name>/testing'.\n   *\n   * @experimental\n   */\n  initTestEnvironment(ngModule: Type<any>|Type<any>[], platform: PlatformRef) {\n    if (this.platform || this.ngModule) {\n      throw new Error('Cannot set base providers because it has already been called');\n    }\n    this.platform = platform;\n    this.ngModule = ngModule;\n  }\n\n  /**\n   * Reset the providers for the test injector.\n   *\n   * @experimental\n   */\n  resetTestEnvironment() {\n    this.resetTestingModule();\n    this.platform = null;\n    this.ngModule = null;\n  }\n\n  resetTestingModule() {\n    this._compiler = null;\n    this._moduleOverrides = [];\n    this._componentOverrides = [];\n    this._directiveOverrides = [];\n    this._pipeOverrides = [];\n\n    this._moduleRef = null;\n    this._moduleWithComponentFactories = null;\n    this._compilerOptions = [];\n    this._providers = [];\n    this._declarations = [];\n    this._imports = [];\n    this._schemas = [];\n    this._instantiated = false;\n    this._activeFixtures.forEach((fixture) => {\n      try {\n        fixture.destroy();\n      } catch (e) {\n        console.error('Error during cleanup of component', fixture.componentInstance);\n      }\n    });\n    this._activeFixtures = [];\n  }\n\n  platform: PlatformRef = null;\n\n  ngModule: Type<any>|Type<any>[] = null;\n\n  configureCompiler(config: {providers?: any[], useJit?: boolean}) {\n    this._assertNotInstantiated('TestBed.configureCompiler', 'configure the compiler');\n    this._compilerOptions.push(config);\n  }\n\n  configureTestingModule(moduleDef: TestModuleMetadata) {\n    this._assertNotInstantiated('TestBed.configureTestingModule', 'configure the test module');\n    if (moduleDef.providers) {\n      this._providers.push(...moduleDef.providers);\n    }\n    if (moduleDef.declarations) {\n      this._declarations.push(...moduleDef.declarations);\n    }\n    if (moduleDef.imports) {\n      this._imports.push(...moduleDef.imports);\n    }\n    if (moduleDef.schemas) {\n      this._schemas.push(...moduleDef.schemas);\n    }\n  }\n\n  compileComponents(): Promise<any> {\n    if (this._moduleWithComponentFactories || this._instantiated) {\n      return Promise.resolve(null);\n    }\n\n    const moduleType = this._createCompilerAndModule();\n    return this._compiler.compileModuleAndAllComponentsAsync(moduleType)\n        .then((moduleAndComponentFactories) => {\n          this._moduleWithComponentFactories = moduleAndComponentFactories;\n        });\n  }\n\n  private _initIfNeeded() {\n    if (this._instantiated) {\n      return;\n    }\n    if (!this._moduleWithComponentFactories) {\n      try {\n        const moduleType = this._createCompilerAndModule();\n        this._moduleWithComponentFactories =\n            this._compiler.compileModuleAndAllComponentsSync(moduleType);\n      } catch (e) {\n        if (getComponentType(e)) {\n          throw new Error(\n              `This test module uses the component ${stringify(getComponentType(e))} which is using a \"templateUrl\" or \"styleUrls\", but they were never compiled. ` +\n              `Please call \"TestBed.compileComponents\" before your test.`);\n        } else {\n          throw e;\n        }\n      }\n    }\n    const ngZone = new NgZone({enableLongStackTrace: true});\n    const ngZoneInjector = ReflectiveInjector.resolveAndCreate(\n        [{provide: NgZone, useValue: ngZone}], this.platform.injector);\n    this._moduleRef = this._moduleWithComponentFactories.ngModuleFactory.create(ngZoneInjector);\n    this._instantiated = true;\n  }\n\n  private _createCompilerAndModule(): Type<any> {\n    const providers = this._providers.concat([{provide: TestBed, useValue: this}]);\n    const declarations = this._declarations;\n    const imports = [this.ngModule, this._imports];\n    const schemas = this._schemas;\n\n    \n    class DynamicTestModule {\n    static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{providers, declarations, imports, schemas}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\n    const compilerFactory: TestingCompilerFactory =\n        this.platform.injector.get(TestingCompilerFactory);\n    this._compiler =\n        compilerFactory.createTestingCompiler(this._compilerOptions.concat([{useDebug: true}]));\n    this._moduleOverrides.forEach((entry) => this._compiler.overrideModule(entry[0], entry[1]));\n    this._componentOverrides.forEach(\n        (entry) => this._compiler.overrideComponent(entry[0], entry[1]));\n    this._directiveOverrides.forEach(\n        (entry) => this._compiler.overrideDirective(entry[0], entry[1]));\n    this._pipeOverrides.forEach((entry) => this._compiler.overridePipe(entry[0], entry[1]));\n    return DynamicTestModule;\n  }\n\n  private _assertNotInstantiated(methodName: string, methodDescription: string) {\n    if (this._instantiated) {\n      throw new Error(\n          `Cannot ${methodDescription} when the test module has already been instantiated. ` +\n          `Make sure you are not using \\`inject\\` before \\`${methodName}\\`.`);\n    }\n  }\n\n  get(token: any, notFoundValue: any = Injector.THROW_IF_NOT_FOUND) {\n    this._initIfNeeded();\n    if (token === TestBed) {\n      return this;\n    }\n    // Tests can inject things from the ng module and from the compiler,\n    // but the ng module can't inject things from the compiler and vice versa.\n    const result = this._moduleRef.injector.get(token, UNDEFINED);\n    return result === UNDEFINED ? this._compiler.injector.get(token, notFoundValue) : result;\n  }\n\n  execute(tokens: any[], fn: Function, context?: any): any {\n    this._initIfNeeded();\n    const params = tokens.map(t => this.get(t));\n    return fn.apply(context, params);\n  }\n\n  overrideModule(ngModule: Type<any>, override: MetadataOverride<NgModule>): void {\n    this._assertNotInstantiated('overrideModule', 'override module metadata');\n    this._moduleOverrides.push([ngModule, override]);\n  }\n\n  overrideComponent(component: Type<any>, override: MetadataOverride<Component>): void {\n    this._assertNotInstantiated('overrideComponent', 'override component metadata');\n    this._componentOverrides.push([component, override]);\n  }\n\n  overrideDirective(directive: Type<any>, override: MetadataOverride<Directive>): void {\n    this._assertNotInstantiated('overrideDirective', 'override directive metadata');\n    this._directiveOverrides.push([directive, override]);\n  }\n\n  overridePipe(pipe: Type<any>, override: MetadataOverride<Pipe>): void {\n    this._assertNotInstantiated('overridePipe', 'override pipe metadata');\n    this._pipeOverrides.push([pipe, override]);\n  }\n\n  createComponent<T>(component: Type<T>): ComponentFixture<T> {\n    this._initIfNeeded();\n    const componentFactory = this._moduleWithComponentFactories.componentFactories.find(\n        (compFactory) => compFactory.componentType === component);\n\n    if (!componentFactory) {\n      throw new Error(\n          `Cannot create the component ${stringify(component)} as it was not imported into the testing module!`);\n    }\n\n    const noNgZone = this.get(ComponentFixtureNoNgZone, false);\n    const autoDetect: boolean = this.get(ComponentFixtureAutoDetect, false);\n    const ngZone: NgZone = noNgZone ? null : this.get(NgZone, null);\n    const testComponentRenderer: TestComponentRenderer = this.get(TestComponentRenderer);\n    const rootElId = `root${_nextRootElementId++}`;\n    testComponentRenderer.insertRootElement(rootElId);\n\n    const initComponent = () => {\n      const componentRef =\n          componentFactory.create(Injector.NULL, [], `#${rootElId}`, this._moduleRef);\n      return new ComponentFixture<T>(componentRef, ngZone, autoDetect);\n    };\n\n    const fixture = !ngZone ? initComponent() : ngZone.run(initComponent);\n    this._activeFixtures.push(fixture);\n    return fixture;\n  }\n}\n\nlet _testBed: TestBed = null;\n\n/**\n * @experimental\n */\nexport function getTestBed() {\n  return _testBed = _testBed || new TestBed();\n}\n\n/**\n * Allows injecting dependencies in `beforeEach()` and `it()`.\n *\n * Example:\n *\n * ```\n * beforeEach(inject([Dependency, AClass], (dep, object) => {\n *   // some code that uses `dep` and `object`\n *   // ...\n * }));\n *\n * it('...', inject([AClass], (object) => {\n *   object.doSomething();\n *   expect(...);\n * })\n * ```\n *\n * Notes:\n * - inject is currently a function because of some Traceur limitation the syntax should\n * eventually\n *   becomes `it('...', @Inject (object: AClass, async: AsyncTestCompleter) => { ... });`\n *\n * @stable\n */\nexport function inject(tokens: any[], fn: Function): () => any {\n  const testBed = getTestBed();\n  if (tokens.indexOf(AsyncTestCompleter) >= 0) {\n    // Not using an arrow function to preserve context passed from call site\n    return function() {\n      // Return an async test method that returns a Promise if AsyncTestCompleter is one of\n      // the injected tokens.\n      return testBed.compileComponents().then(() => {\n        const completer: AsyncTestCompleter = testBed.get(AsyncTestCompleter);\n        testBed.execute(tokens, fn, this);\n        return completer.promise;\n      });\n    };\n  } else {\n    // Not using an arrow function to preserve context passed from call site\n    return function() { return testBed.execute(tokens, fn, this); };\n  }\n}\n\n/**\n * @experimental\n */\nexport class InjectSetupWrapper {\n  constructor(private _moduleDef: () => TestModuleMetadata) {}\n\n  private _addModule() {\n    const moduleDef = this._moduleDef();\n    if (moduleDef) {\n      getTestBed().configureTestingModule(moduleDef);\n    }\n  }\n\n  inject(tokens: any[], fn: Function): () => any {\n    const self = this;\n    // Not using an arrow function to preserve context passed from call site\n    return function() {\n      self._addModule();\n      return inject(tokens, fn).call(this);\n    };\n  }\n}\n\n/**\n * @experimental\n */\nexport function withModule(moduleDef: TestModuleMetadata): InjectSetupWrapper;\nexport function withModule(moduleDef: TestModuleMetadata, fn: Function): () => any;\nexport function withModule(moduleDef: TestModuleMetadata, fn: Function = null): (() => any)|\n    InjectSetupWrapper {\n  if (fn) {\n    // Not using an arrow function to preserve context passed from call site\n    return function() {\n      const testBed = getTestBed();\n      if (moduleDef) {\n        testBed.configureTestingModule(moduleDef);\n      }\n      return fn.apply(this);\n    };\n  }\n  return new InjectSetupWrapper(() => moduleDef);\n}\n\nfunction getComponentType(error: Error): Function {\n  return (error as any)[ɵERROR_COMPONENT_TYPE];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Public Test Library for unit testing Angular2 Applications. Assumes that you are running\n * with Jasmine, Mocha, or a similar framework which exports a beforeEach function and\n * allows tests to be asynchronous by either returning a promise or using a 'done' parameter.\n */\n\nimport {resetFakeAsyncZone} from './fake_async';\nimport {TestBed} from './test_bed';\n\ndeclare var global: any;\n\nconst _global = <any>(typeof window === 'undefined' ? global : window);\n\n// Reset the test providers and the fake async zone before each test.\nif (_global.beforeEach) {\n  _global.beforeEach(() => {\n    TestBed.resetTestingModule();\n    resetFakeAsyncZone();\n  });\n}\n\n// TODO(juliemr): remove this, only used because we need to export something to have compilation\n// work.\nexport const __core_private_testing_placeholder__ = '';\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Injectable completer that allows signaling completion of an asynchronous test. Used internally.\n */\nexport class AsyncTestCompleter {\n  private _resolve: (result: any) => void;\n  private _reject: (err: any) => void;\n  private _promise: Promise<any> = new Promise((res, rej) => {\n    this._resolve = res;\n    this._reject = rej;\n  });\n  done(value?: any) { this._resolve(value); }\n\n  fail(error?: any, stackTrace?: string) { this._reject(error); }\n\n  get promise(): Promise<any> { return this._promise; }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Compiler, CompilerOptions, Component, Directive, Injector, NgModule, Pipe, Type} from '@angular/core';\n\nimport {MetadataOverride} from './metadata_override';\n\nfunction unimplemented(): any {\n  throw Error('unimplemented');\n}\n\n/**\n * Special interface to the compiler only used by testing\n *\n * @experimental\n */\nexport class TestingCompiler extends Compiler {\n  get injector(): Injector { throw unimplemented(); }\n  overrideModule(module: Type<any>, overrides: MetadataOverride<NgModule>): void {\n    throw unimplemented();\n  }\n  overrideDirective(directive: Type<any>, overrides: MetadataOverride<Directive>): void {\n    throw unimplemented();\n  }\n  overrideComponent(component: Type<any>, overrides: MetadataOverride<Component>): void {\n    throw unimplemented();\n  }\n  overridePipe(directive: Type<any>, overrides: MetadataOverride<Pipe>): void {\n    throw unimplemented();\n  }\n}\n\n/**\n * A factory for creating a Compiler\n *\n * @experimental\n */\nexport abstract class TestingCompilerFactory {\n  abstract createTestingCompiler(options?: CompilerOptions[]): TestingCompiler;\n}\n"],"names":["async","fn","_global","jasmine","done","fail","e","err","_this","this","Promise","finishCallback","failCallback","runInTestZone","context","currentZone","Zone","current","AsyncTestZoneSpec","undefined","ProxyZoneSpec","Error","proxyZoneSpec","get","proxyZone","getZoneWith","previousDelegate","getDelegate","parent","run","setDelegate","error","testZoneSpec","fakeAsync","args","_i","arguments","length","assertPresent","_inFakeAsyncCall","_fakeAsyncTestZoneSpec","FakeAsyncTestZoneSpec","res","lastProxyZoneSpec","apply","flushMicrotasks","pendingPeriodicTimers","pendingTimers","discardPeriodicTasks","inject","tokens","testBed","getTestBed","indexOf","AsyncTestCompleter","compileComponents","then","completer","execute","withModule","moduleDef","InjectSetupWrapper","getComponentType","ComponentFixture","componentRef","ngZone","_autoDetect","_isStable","_isDestroyed","_promise","_onUnstableSubscription","_onStableSubscription","_onMicrotaskEmptySubscription","_onErrorSubscription","changeDetectorRef","elementRef","location","debugElement","_angular_core","getDebugNode","nativeElement","onUnstable","subscribe","next","onMicrotaskEmpty","onStable","scheduleMicroTask","hasPendingMacrotasks","_resolve","prototype","_tick","checkNoChanges","detectChanges","whenStable","isStable","destroy","unsubscribe","rej","_reject","stackTrace","TestingCompiler","_super","__extends","Object","defineProperty","unimplemented","enumerable","configurable","overrideModule","module","overrides","overridePipe","directive","TestingCompilerFactory","TestComponentRenderer","TestBed","_instantiated","_compiler","_moduleRef","_moduleWithComponentFactories","_compilerOptions","_moduleOverrides","_componentOverrides","initTestEnvironment","ngModule","platform","resetTestEnvironment","override","overrideComponent","component","overrideDirective","pipe","overrideTemplate","template","resetTestingModule","_directiveOverrides","_pipeOverrides","_providers","_declarations","_imports","_schemas","_activeFixtures","forEach","fixture","console","componentInstance","configureCompiler","config","_assertNotInstantiated","push","configureTestingModule","providers","_a","declarations","_b","imports","schemas","_d","_c","resolve","moduleType","_createCompilerAndModule","compileModuleAndAllComponentsAsync","moduleAndComponentFactories","_initIfNeeded","compileModuleAndAllComponentsSync","ɵstringify","NgZone","enableLongStackTrace","ngZoneInjector","ReflectiveInjector","resolveAndCreate","provide","useValue","injector","DynamicTestModule","decorators","type","NgModule","ctorParameters","compilerFactory","createTestingCompiler","concat","useDebug","entry","methodName","methodDescription","token","notFoundValue","Injector","THROW_IF_NOT_FOUND","result","UNDEFINED","params","map","t","createComponent","componentFactory","componentFactories","find","compFactory","componentType","noNgZone","ComponentFixtureNoNgZone","autoDetect","ComponentFixtureAutoDetect","testComponentRenderer","rootElId","_nextRootElementId","insertRootElement","initComponent","_moduleDef","_addModule","self","call","_global$1","window","global"],"mappings":"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"}