{"version":3,"file":"platform-browser-animations.umd.js","sources":["../../../../packages/platform-browser/animations/src/module.ts","../../../../packages/platform-browser/animations/src/providers.ts","../../../../packages/platform-browser/animations/src/animation_renderer.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {BrowserModule} from '@angular/platform-browser';\n\nimport {BROWSER_ANIMATIONS_PROVIDERS, BROWSER_NOOP_ANIMATIONS_PROVIDERS} from './providers';\n/**\n * \\@experimental Animation support is experimental.\n */\nexport class BrowserAnimationsModule {\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [BrowserModule],\n  providers: BROWSER_ANIMATIONS_PROVIDERS,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction BrowserAnimationsModule_tsickle_Closure_declarations() {\n/** @type {?} */\nBrowserAnimationsModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nBrowserAnimationsModule.ctorParameters;\n}\n\n/**\n * \\@experimental Animation support is experimental.\n */\nexport class NoopAnimationsModule {\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [BrowserModule],\n  providers: BROWSER_NOOP_ANIMATIONS_PROVIDERS,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction NoopAnimationsModule_tsickle_Closure_declarations() {\n/** @type {?} */\nNoopAnimationsModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNoopAnimationsModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {AnimationDriver, ɵAnimationEngine as AnimationEngine, ɵAnimationStyleNormalizer as AnimationStyleNormalizer, ɵDomAnimationEngine as DomAnimationEngine, ɵNoopAnimationDriver as NoopAnimationDriver, ɵNoopAnimationEngine as NoopAnimationEngine, ɵWebAnimationsDriver as WebAnimationsDriver, ɵWebAnimationsStyleNormalizer as WebAnimationsStyleNormalizer, ɵsupportsWebAnimations as supportsWebAnimations} from '@angular/animations/browser';\nimport {Injectable, NgZone, Provider, RendererFactory2} from '@angular/core';\nimport {ɵDomRendererFactory2 as DomRendererFactory2} from '@angular/platform-browser';\n\nimport {AnimationRendererFactory} from './animation_renderer';\nexport class InjectableAnimationEngine extends DomAnimationEngine {\n/**\n * @param {?} driver\n * @param {?} normalizer\n */\nconstructor(driver: AnimationDriver, normalizer: AnimationStyleNormalizer) {\n    super(driver, normalizer);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: AnimationDriver, },\n{type: AnimationStyleNormalizer, },\n];\n}\n\nfunction InjectableAnimationEngine_tsickle_Closure_declarations() {\n/** @type {?} */\nInjectableAnimationEngine.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nInjectableAnimationEngine.ctorParameters;\n}\n\n/**\n * @return {?}\n */\nexport function instantiateSupportedAnimationDriver() {\n  if (supportsWebAnimations()) {\n    return new WebAnimationsDriver();\n  }\n  return new NoopAnimationDriver();\n}\n/**\n * @return {?}\n */\nexport function instantiateDefaultStyleNormalizer() {\n  return new WebAnimationsStyleNormalizer();\n}\n/**\n * @param {?} renderer\n * @param {?} engine\n * @param {?} zone\n * @return {?}\n */\nexport function instantiateRendererFactory(\n    renderer: DomRendererFactory2, engine: AnimationEngine, zone: NgZone) {\n  return new AnimationRendererFactory(renderer, engine, zone);\n}\n\n/**\n * Separate providers from the actual module so that we can do a local modification in Google3 to\n * include them in the BrowserModule.\n */\nexport const /** @type {?} */ BROWSER_ANIMATIONS_PROVIDERS: Provider[] = [\n  {provide: AnimationDriver, useFactory: instantiateSupportedAnimationDriver},\n  {provide: AnimationStyleNormalizer, useFactory: instantiateDefaultStyleNormalizer},\n  {provide: AnimationEngine, useClass: InjectableAnimationEngine}, {\n    provide: RendererFactory2,\n    useFactory: instantiateRendererFactory,\n    deps: [DomRendererFactory2, AnimationEngine, NgZone]\n  }\n];\n\n/**\n * Separate providers from the actual module so that we can do a local modification in Google3 to\n * include them in the BrowserTestingModule.\n */\nexport const /** @type {?} */ BROWSER_NOOP_ANIMATIONS_PROVIDERS: Provider[] = [\n  {provide: AnimationEngine, useClass: NoopAnimationEngine}, {\n    provide: RendererFactory2,\n    useFactory: instantiateRendererFactory,\n    deps: [DomRendererFactory2, AnimationEngine, NgZone]\n  }\n];\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationTriggerMetadata} from '@angular/animations';\nimport {ɵAnimationEngine as AnimationEngine} from '@angular/animations/browser';\nimport {Injectable, NgZone, Renderer2, RendererFactory2, RendererStyleFlags2, RendererType2} from '@angular/core';\nexport class AnimationRendererFactory implements RendererFactory2 {\n/**\n * @param {?} delegate\n * @param {?} _engine\n * @param {?} _zone\n */\nconstructor(\nprivate delegate: RendererFactory2,\nprivate _engine: AnimationEngine,\nprivate _zone: NgZone) {\n  }\n/**\n * @param {?} hostElement\n * @param {?} type\n * @return {?}\n */\ncreateRenderer(hostElement: any, type: RendererType2): Renderer2 {\n    let /** @type {?} */ delegate = this.delegate.createRenderer(hostElement, type);\n    if (!hostElement || !type || !type.data || !type.data['animation']) return delegate;\n\n    const /** @type {?} */ namespaceId = type.id;\n    const /** @type {?} */ animationTriggers = /** @type {?} */(( type.data['animation'] as AnimationTriggerMetadata[]));\n    animationTriggers.forEach(\n        trigger => this._engine.registerTrigger(trigger, namespaceify(namespaceId, trigger.name)));\n    return new AnimationRenderer(delegate, this._engine, this._zone, namespaceId);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: RendererFactory2, },\n{type: AnimationEngine, },\n{type: NgZone, },\n];\n}\n\nfunction AnimationRendererFactory_tsickle_Closure_declarations() {\n/** @type {?} */\nAnimationRendererFactory.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nAnimationRendererFactory.ctorParameters;\n/** @type {?} */\nAnimationRendererFactory.prototype.delegate;\n/** @type {?} */\nAnimationRendererFactory.prototype._engine;\n/** @type {?} */\nAnimationRendererFactory.prototype._zone;\n}\n\nexport class AnimationRenderer implements Renderer2 {\npublic destroyNode: (node: any) => (void|any) = null;\nprivate _flushPromise: Promise<any> = null;\n/**\n * @param {?} delegate\n * @param {?} _engine\n * @param {?} _zone\n * @param {?} _namespaceId\n */\nconstructor(\npublic delegate: Renderer2,\nprivate _engine: AnimationEngine,\nprivate _zone: NgZone,\nprivate _namespaceId: string) {\n    this.destroyNode = this.delegate.destroyNode ? (n) => delegate.destroyNode(n) : null;\n  }\n/**\n * @return {?}\n */\nget data() { return this.delegate.data; }\n/**\n * @return {?}\n */\ndestroy(): void { this.delegate.destroy(); }\n/**\n * @param {?} name\n * @param {?=} namespace\n * @return {?}\n */\ncreateElement(name: string, namespace?: string): any {\n    return this.delegate.createElement(name, namespace);\n  }\n/**\n * @param {?} value\n * @return {?}\n */\ncreateComment(value: string): any { return this.delegate.createComment(value); }\n/**\n * @param {?} value\n * @return {?}\n */\ncreateText(value: string): any { return this.delegate.createText(value); }\n/**\n * @param {?} selectorOrNode\n * @return {?}\n */\nselectRootElement(selectorOrNode: string|any): any {\n    return this.delegate.selectRootElement(selectorOrNode);\n  }\n/**\n * @param {?} node\n * @return {?}\n */\nparentNode(node: any): any { return this.delegate.parentNode(node); }\n/**\n * @param {?} node\n * @return {?}\n */\nnextSibling(node: any): any { return this.delegate.nextSibling(node); }\n/**\n * @param {?} el\n * @param {?} name\n * @param {?} value\n * @param {?=} namespace\n * @return {?}\n */\nsetAttribute(el: any, name: string, value: string, namespace?: string): void {\n    this.delegate.setAttribute(el, name, value, namespace);\n  }\n/**\n * @param {?} el\n * @param {?} name\n * @param {?=} namespace\n * @return {?}\n */\nremoveAttribute(el: any, name: string, namespace?: string): void {\n    this.delegate.removeAttribute(el, name, namespace);\n  }\n/**\n * @param {?} el\n * @param {?} name\n * @return {?}\n */\naddClass(el: any, name: string): void { this.delegate.addClass(el, name); }\n/**\n * @param {?} el\n * @param {?} name\n * @return {?}\n */\nremoveClass(el: any, name: string): void { this.delegate.removeClass(el, name); }\n/**\n * @param {?} el\n * @param {?} style\n * @param {?} value\n * @param {?} flags\n * @return {?}\n */\nsetStyle(el: any, style: string, value: any, flags: RendererStyleFlags2): void {\n    this.delegate.setStyle(el, style, value, flags);\n  }\n/**\n * @param {?} el\n * @param {?} style\n * @param {?} flags\n * @return {?}\n */\nremoveStyle(el: any, style: string, flags: RendererStyleFlags2): void {\n    this.delegate.removeStyle(el, style, flags);\n  }\n/**\n * @param {?} node\n * @param {?} value\n * @return {?}\n */\nsetValue(node: any, value: string): void { this.delegate.setValue(node, value); }\n/**\n * @param {?} parent\n * @param {?} newChild\n * @return {?}\n */\nappendChild(parent: any, newChild: any): void {\n    this._engine.onInsert(newChild, () => this.delegate.appendChild(parent, newChild));\n    this._queueFlush();\n  }\n/**\n * @param {?} parent\n * @param {?} newChild\n * @param {?} refChild\n * @return {?}\n */\ninsertBefore(parent: any, newChild: any, refChild: any): void {\n    this._engine.onInsert(newChild, () => this.delegate.insertBefore(parent, newChild, refChild));\n    this._queueFlush();\n  }\n/**\n * @param {?} parent\n * @param {?} oldChild\n * @return {?}\n */\nremoveChild(parent: any, oldChild: any): void {\n    this._engine.onRemove(oldChild, () => this.delegate.removeChild(parent, oldChild));\n    this._queueFlush();\n  }\n/**\n * @param {?} el\n * @param {?} name\n * @param {?} value\n * @return {?}\n */\nsetProperty(el: any, name: string, value: any): void {\n    if (name.charAt(0) == '@') {\n      this._engine.setProperty(el, namespaceify(this._namespaceId, name.substr(1)), value);\n      this._queueFlush();\n    } else {\n      this.delegate.setProperty(el, name, value);\n    }\n  }\n/**\n * @param {?} target\n * @param {?} eventName\n * @param {?} callback\n * @return {?}\n */\nlisten(target: 'window'|'document'|'body'|any, eventName: string, callback: (event: any) => any):\n      () => void {\n    if (eventName.charAt(0) == '@') {\n      const /** @type {?} */ element = resolveElementFromTarget(target);\n      const [name, phase] = parseTriggerCallbackName(eventName.substr(1));\n      return this._engine.listen(\n          element, namespaceify(this._namespaceId, name), phase, (event: any) => {\n            const /** @type {?} */ e = /** @type {?} */(( event as any));\n            if (e.triggerName) {\n              e.triggerName = deNamespaceify(this._namespaceId, e.triggerName);\n            }\n            this._zone.run(() => callback(event));\n          });\n    }\n    return this.delegate.listen(target, eventName, callback);\n  }\n/**\n * @return {?}\n */\nprivate _queueFlush() {\n    if (!this._flushPromise) {\n      this._zone.runOutsideAngular(() => {\n        this._flushPromise = Promise.resolve(null).then(() => {\n          this._flushPromise = null;\n          this._engine.flush();\n        });\n      });\n    }\n  }\n}\n\nfunction AnimationRenderer_tsickle_Closure_declarations() {\n/** @type {?} */\nAnimationRenderer.prototype.destroyNode;\n/** @type {?} */\nAnimationRenderer.prototype._flushPromise;\n/** @type {?} */\nAnimationRenderer.prototype.delegate;\n/** @type {?} */\nAnimationRenderer.prototype._engine;\n/** @type {?} */\nAnimationRenderer.prototype._zone;\n/** @type {?} */\nAnimationRenderer.prototype._namespaceId;\n}\n\n/**\n * @param {?} target\n * @return {?}\n */\nfunction resolveElementFromTarget(target: 'window' | 'document' | 'body' | any): any {\n  switch (target) {\n    case 'body':\n      return document.body;\n    case 'document':\n      return document;\n    case 'window':\n      return window;\n    default:\n      return target;\n  }\n}\n/**\n * @param {?} triggerName\n * @return {?}\n */\nfunction parseTriggerCallbackName(triggerName: string) {\n  const /** @type {?} */ dotIndex = triggerName.indexOf('.');\n  const /** @type {?} */ trigger = triggerName.substring(0, dotIndex);\n  const /** @type {?} */ phase = triggerName.substr(dotIndex + 1);\n  return [trigger, phase];\n}\n/**\n * @param {?} namespaceId\n * @param {?} value\n * @return {?}\n */\nfunction namespaceify(namespaceId: string, value: string): string {\n  return `${namespaceId}#${value}`;\n}\n/**\n * @param {?} namespaceId\n * @param {?} value\n * @return {?}\n */\nfunction deNamespaceify(namespaceId: string, value: string): string {\n  return value.replace(namespaceId + '#', '');\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"],"names":["ɵAnimationEngine","ɵNoopAnimationEngine","ɵAnimationStyleNormalizer","DomRendererFactory2","ɵNoopAnimationDriver","Injectable","ɵDomAnimationEngine"],"mappings":"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"}