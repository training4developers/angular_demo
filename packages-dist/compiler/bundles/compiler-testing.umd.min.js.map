{"version":3,"file":"compiler-testing.umd.min.js","sources":["../../../../packages/compiler/testing/src/metadata_overrider.ts","../../../../packages/compiler/testing/src/testing.ts","../../../../packages/compiler/testing/src/schema_registry_mock.ts","../../../../packages/compiler/testing/src/directive_resolver_mock.ts","../../../../packages/compiler/testing/src/ng_module_resolver_mock.ts","../../../../packages/compiler/testing/src/pipe_resolver_mock.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ɵstringify as stringify} from '@angular/core';\nimport {MetadataOverride} from '@angular/core/testing';\n\ntype StringMap = {\n  [key: string]: any\n};\n\nlet _nextReferenceId = 0;\n\nexport class MetadataOverrider {\n  private _references = new Map<any, string>();\n  /**\n   * Creates a new instance for the given metadata class\n   * based on an old instance and overrides.\n   */\n  overrideMetadata<C extends T, T>(\n      metadataClass: {new (options: T): C;}, oldMetadata: C, override: MetadataOverride<T>): C {\n    const props: StringMap = {};\n    if (oldMetadata) {\n      _valueProps(oldMetadata).forEach((prop) => props[prop] = (<any>oldMetadata)[prop]);\n    }\n\n    if (override.set) {\n      if (override.remove || override.add) {\n        throw new Error(`Cannot set and add/remove ${stringify(metadataClass)} at the same time!`);\n      }\n      setMetadata(props, override.set);\n    }\n    if (override.remove) {\n      removeMetadata(props, override.remove, this._references);\n    }\n    if (override.add) {\n      addMetadata(props, override.add);\n    }\n    return new metadataClass(<any>props);\n  }\n}\n\nfunction removeMetadata(metadata: StringMap, remove: any, references: Map<any, string>) {\n  const removeObjects = new Set<string>();\n  for (const prop in remove) {\n    const removeValue = remove[prop];\n    if (removeValue instanceof Array) {\n      removeValue.forEach(\n          (value: any) => { removeObjects.add(_propHashKey(prop, value, references)); });\n    } else {\n      removeObjects.add(_propHashKey(prop, removeValue, references));\n    }\n  }\n\n  for (const prop in metadata) {\n    const propValue = metadata[prop];\n    if (propValue instanceof Array) {\n      metadata[prop] = propValue.filter(\n          (value: any) => !removeObjects.has(_propHashKey(prop, value, references)));\n    } else {\n      if (removeObjects.has(_propHashKey(prop, propValue, references))) {\n        metadata[prop] = undefined;\n      }\n    }\n  }\n}\n\nfunction addMetadata(metadata: StringMap, add: any) {\n  for (const prop in add) {\n    const addValue = add[prop];\n    const propValue = metadata[prop];\n    if (propValue != null && propValue instanceof Array) {\n      metadata[prop] = propValue.concat(addValue);\n    } else {\n      metadata[prop] = addValue;\n    }\n  }\n}\n\nfunction setMetadata(metadata: StringMap, set: any) {\n  for (const prop in set) {\n    metadata[prop] = set[prop];\n  }\n}\n\nfunction _propHashKey(propName: any, propValue: any, references: Map<any, string>): string {\n  const replacer = (key: any, value: any) => {\n    if (typeof value === 'function') {\n      value = _serializeReference(value, references);\n    }\n    return value;\n  };\n\n  return `${propName}:${JSON.stringify(propValue, replacer)}`;\n}\n\nfunction _serializeReference(ref: any, references: Map<any, string>): string {\n  let id = references.get(ref);\n  if (!id) {\n    id = `${stringify(ref)}${_nextReferenceId++}`;\n    references.set(ref, id);\n  }\n  return id;\n}\n\n\nfunction _valueProps(obj: any): string[] {\n  const props: string[] = [];\n  // regular public props\n  Object.keys(obj).forEach((prop) => {\n    if (!prop.startsWith('_')) {\n      props.push(prop);\n    }\n  });\n\n  // getters\n  let proto = obj;\n  while (proto = Object.getPrototypeOf(proto)) {\n    Object.keys(proto).forEach((protoProp) => {\n      const desc = Object.getOwnPropertyDescriptor(proto, protoProp);\n      if (!protoProp.startsWith('_') && desc && 'get' in desc) {\n        props.push(protoProp);\n      }\n    });\n  }\n  return props;\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @module\n * @description\n * Entry point for all APIs of the compiler package.\n *\n * <div class=\"callout is-critical\">\n *   <header>Unstable APIs</header>\n *   <p>\n *     All compiler apis are currently considered experimental and private!\n *   </p>\n *   <p>\n *     We expect the APIs in this package to keep on changing. Do not rely on them.\n *   </p>\n * </div>\n */\nexport * from './schema_registry_mock';\nexport * from './directive_resolver_mock';\nexport * from './ng_module_resolver_mock';\nexport * from './pipe_resolver_mock';\n\nimport {createPlatformFactory, ModuleWithComponentFactories, Injectable, CompilerOptions, COMPILER_OPTIONS, CompilerFactory, NgModuleFactory, Injector, NgModule, Component, Directive, Pipe, Type, PlatformRef} from '@angular/core';\nimport {MetadataOverride, ɵTestingCompilerFactory as TestingCompilerFactory, ɵTestingCompiler as TestingCompiler} from '@angular/core/testing';\nimport {platformCoreDynamic, JitCompiler, DirectiveResolver, NgModuleResolver, PipeResolver} from '@angular/compiler';\nimport {MockDirectiveResolver} from './directive_resolver_mock';\nimport {MockNgModuleResolver} from './ng_module_resolver_mock';\nimport {MockPipeResolver} from './pipe_resolver_mock';\nimport {MetadataOverrider} from './metadata_overrider';\n\n\nexport class TestingCompilerFactoryImpl implements TestingCompilerFactory {\n  constructor(private _compilerFactory: CompilerFactory) {}\n\n  createTestingCompiler(options: CompilerOptions[]): TestingCompiler {\n    const compiler = <JitCompiler>this._compilerFactory.createCompiler(options);\n    return new TestingCompilerImpl(\n        compiler, compiler.injector.get(MockDirectiveResolver),\n        compiler.injector.get(MockPipeResolver), compiler.injector.get(MockNgModuleResolver));\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: CompilerFactory, },\n];\n}\n\nexport class TestingCompilerImpl implements TestingCompiler {\n  private _overrider = new MetadataOverrider();\n  constructor(\n      private _compiler: JitCompiler, private _directiveResolver: MockDirectiveResolver,\n      private _pipeResolver: MockPipeResolver, private _moduleResolver: MockNgModuleResolver) {}\n  get injector(): Injector { return this._compiler.injector; }\n\n  compileModuleSync<T>(moduleType: Type<T>): NgModuleFactory<T> {\n    return this._compiler.compileModuleSync(moduleType);\n  }\n\n  compileModuleAsync<T>(moduleType: Type<T>): Promise<NgModuleFactory<T>> {\n    return this._compiler.compileModuleAsync(moduleType);\n  }\n  compileModuleAndAllComponentsSync<T>(moduleType: Type<T>): ModuleWithComponentFactories<T> {\n    return this._compiler.compileModuleAndAllComponentsSync(moduleType);\n  }\n\n  compileModuleAndAllComponentsAsync<T>(moduleType: Type<T>):\n      Promise<ModuleWithComponentFactories<T>> {\n    return this._compiler.compileModuleAndAllComponentsAsync(moduleType);\n  }\n\n  getNgContentSelectors(component: Type<any>): string[] {\n    return this._compiler.getNgContentSelectors(component);\n  }\n\n  overrideModule(ngModule: Type<any>, override: MetadataOverride<NgModule>): void {\n    const oldMetadata = this._moduleResolver.resolve(ngModule, false);\n    this._moduleResolver.setNgModule(\n        ngModule, this._overrider.overrideMetadata(NgModule, oldMetadata, override));\n  }\n  overrideDirective(directive: Type<any>, override: MetadataOverride<Directive>): void {\n    const oldMetadata = this._directiveResolver.resolve(directive, false);\n    this._directiveResolver.setDirective(\n        directive, this._overrider.overrideMetadata(Directive, oldMetadata, override));\n  }\n  overrideComponent(component: Type<any>, override: MetadataOverride<Component>): void {\n    const oldMetadata = this._directiveResolver.resolve(component, false);\n    this._directiveResolver.setDirective(\n        component, this._overrider.overrideMetadata(Component, oldMetadata, override));\n  }\n  overridePipe(pipe: Type<any>, override: MetadataOverride<Pipe>): void {\n    const oldMetadata = this._pipeResolver.resolve(pipe, false);\n    this._pipeResolver.setPipe(pipe, this._overrider.overrideMetadata(Pipe, oldMetadata, override));\n  }\n  clearCache(): void { this._compiler.clearCache(); }\n  clearCacheFor(type: Type<any>) { this._compiler.clearCacheFor(type); }\n}\n\n/**\n * Platform for dynamic tests\n *\n * @experimental\n */\nexport const platformCoreDynamicTesting: (extraProviders?: any[]) => PlatformRef =\n    createPlatformFactory(platformCoreDynamic, 'coreDynamicTesting', [\n      {\n        provide: COMPILER_OPTIONS,\n        useValue: {\n          providers: [\n            MockPipeResolver,\n            {provide: PipeResolver, useExisting: MockPipeResolver},\n            MockDirectiveResolver,\n            {provide: DirectiveResolver, useExisting: MockDirectiveResolver},\n            MockNgModuleResolver,\n            {provide: NgModuleResolver, useExisting: MockNgModuleResolver},\n          ]\n        },\n        multi: true\n      },\n      {provide: TestingCompilerFactory, useClass: TestingCompilerFactoryImpl}\n    ]);\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ElementSchemaRegistry} from '@angular/compiler';\nimport {SchemaMetadata, SecurityContext} from '@angular/core';\n\nexport class MockSchemaRegistry implements ElementSchemaRegistry {\n  constructor(\n      public existingProperties: {[key: string]: boolean},\n      public attrPropMapping: {[key: string]: string},\n      public existingElements: {[key: string]: boolean}, public invalidProperties: Array<string>,\n      public invalidAttributes: Array<string>) {}\n\n  hasProperty(tagName: string, property: string, schemas: SchemaMetadata[]): boolean {\n    const value = this.existingProperties[property];\n    return value === void 0 ? true : value;\n  }\n\n  hasElement(tagName: string, schemaMetas: SchemaMetadata[]): boolean {\n    const value = this.existingElements[tagName.toLowerCase()];\n    return value === void 0 ? true : value;\n  }\n\n  allKnownElementNames(): string[] { return Object.keys(this.existingElements); }\n\n  securityContext(selector: string, property: string, isAttribute: boolean): SecurityContext {\n    return SecurityContext.NONE;\n  }\n\n  getMappedPropName(attrName: string): string { return this.attrPropMapping[attrName] || attrName; }\n\n  getDefaultComponentElementName(): string { return 'ng-component'; }\n\n  validateProperty(name: string): {error: boolean, msg?: string} {\n    if (this.invalidProperties.indexOf(name) > -1) {\n      return {error: true, msg: `Binding to property '${name}' is disallowed for security reasons`};\n    } else {\n      return {error: false};\n    }\n  }\n\n  validateAttribute(name: string): {error: boolean, msg?: string} {\n    if (this.invalidAttributes.indexOf(name) > -1) {\n      return {\n        error: true,\n        msg: `Binding to attribute '${name}' is disallowed for security reasons`\n      };\n    } else {\n      return {error: false};\n    }\n  }\n\n  normalizeAnimationStyleProperty(propName: string): string { return propName; }\n  normalizeAnimationStyleValue(camelCaseProp: string, userProvidedProp: string, val: string|number):\n      {error: string, value: string} {\n    return {error: null, value: val.toString()};\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {DirectiveResolver} from '@angular/compiler';\nimport {Compiler, Component, Directive, Injectable, Injector, Provider, Type, resolveForwardRef, ɵViewMetadata as ViewMetadata} from '@angular/core';\n\n\n\n/**\n * An implementation of {@link DirectiveResolver} that allows overriding\n * various properties of directives.\n */\n\nexport class MockDirectiveResolver extends DirectiveResolver {\n  private _directives = new Map<Type<any>, Directive>();\n  private _providerOverrides = new Map<Type<any>, any[]>();\n  private _viewProviderOverrides = new Map<Type<any>, any[]>();\n  private _views = new Map<Type<any>, ViewMetadata>();\n  private _inlineTemplates = new Map<Type<any>, string>();\n\n  constructor(private _injector: Injector) { super(); }\n\n  private get _compiler(): Compiler { return this._injector.get(Compiler); }\n\n  private _clearCacheFor(component: Type<any>) { this._compiler.clearCacheFor(component); }\n\n  resolve(type: Type<any>, throwIfNotFound = true): Directive {\n    let metadata = this._directives.get(type);\n    if (!metadata) {\n      metadata = super.resolve(type, throwIfNotFound);\n    }\n    if (!metadata) {\n      return null;\n    }\n\n    const providerOverrides = this._providerOverrides.get(type);\n    const viewProviderOverrides = this._viewProviderOverrides.get(type);\n\n    let providers = metadata.providers;\n    if (providerOverrides != null) {\n      const originalViewProviders: Provider[] = metadata.providers || [];\n      providers = originalViewProviders.concat(providerOverrides);\n    }\n\n    if (metadata instanceof Component) {\n      let viewProviders = metadata.viewProviders;\n      if (viewProviderOverrides != null) {\n        const originalViewProviders: Provider[] = metadata.viewProviders || [];\n        viewProviders = originalViewProviders.concat(viewProviderOverrides);\n      }\n\n      let view = this._views.get(type);\n      if (!view) {\n        view = <any>metadata;\n      }\n\n      let animations = view.animations;\n      let templateUrl = view.templateUrl;\n\n      let inlineTemplate = this._inlineTemplates.get(type);\n      if (inlineTemplate != null) {\n        templateUrl = null;\n      } else {\n        inlineTemplate = view.template;\n      }\n\n      return new Component({\n        selector: metadata.selector,\n        inputs: metadata.inputs,\n        outputs: metadata.outputs,\n        host: metadata.host,\n        exportAs: metadata.exportAs,\n        moduleId: metadata.moduleId,\n        queries: metadata.queries,\n        changeDetection: metadata.changeDetection,\n        providers: providers,\n        viewProviders: viewProviders,\n        entryComponents: metadata.entryComponents,\n        template: inlineTemplate,\n        templateUrl: templateUrl,\n        animations: animations,\n        styles: view.styles,\n        styleUrls: view.styleUrls,\n        encapsulation: view.encapsulation,\n        interpolation: view.interpolation\n      });\n    }\n\n    return new Directive({\n      selector: metadata.selector,\n      inputs: metadata.inputs,\n      outputs: metadata.outputs,\n      host: metadata.host,\n      providers: providers,\n      exportAs: metadata.exportAs,\n      queries: metadata.queries\n    });\n  }\n\n  /**\n   * Overrides the {@link Directive} for a directive.\n   */\n  setDirective(type: Type<any>, metadata: Directive): void {\n    this._directives.set(type, metadata);\n    this._clearCacheFor(type);\n  }\n\n  setProvidersOverride(type: Type<any>, providers: Provider[]): void {\n    this._providerOverrides.set(type, providers);\n    this._clearCacheFor(type);\n  }\n\n  setViewProvidersOverride(type: Type<any>, viewProviders: Provider[]): void {\n    this._viewProviderOverrides.set(type, viewProviders);\n    this._clearCacheFor(type);\n  }\n\n  /**\n   * Overrides the {@link ViewMetadata} for a component.\n   */\n  setView(component: Type<any>, view: ViewMetadata): void {\n    this._views.set(component, view);\n    this._clearCacheFor(component);\n  }\n  /**\n   * Overrides the inline template for a component - other configuration remains unchanged.\n   */\n  setInlineTemplate(component: Type<any>, template: string): void {\n    this._inlineTemplates.set(component, template);\n    this._clearCacheFor(component);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Injector, },\n];\n}\n\nfunction flattenArray(tree: any[], out: Array<Type<any>|any[]>): void {\n  if (tree == null) return;\n  for (let i = 0; i < tree.length; i++) {\n    const item = resolveForwardRef(tree[i]);\n    if (Array.isArray(item)) {\n      flattenArray(item, out);\n    } else {\n      out.push(item);\n    }\n  }\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModuleResolver} from '@angular/compiler';\nimport {Compiler, Injectable, Injector, NgModule, Type} from '@angular/core';\n\n\nexport class MockNgModuleResolver extends NgModuleResolver {\n  private _ngModules = new Map<Type<any>, NgModule>();\n\n  constructor(private _injector: Injector) { super(); }\n\n  /**\n   * Overrides the {@link NgModule} for a module.\n   */\n  setNgModule(type: Type<any>, metadata: NgModule): void {\n    this._ngModules.set(type, metadata);\n    this._clearCacheFor(type);\n  }\n\n  /**\n   * Returns the {@link NgModule} for a module:\n   * - Set the {@link NgModule} to the overridden view when it exists or fallback to the\n   * default\n   * `NgModuleResolver`, see `setNgModule`.\n   */\n  resolve(type: Type<any>, throwIfNotFound = true): NgModule {\n    return this._ngModules.get(type) || super.resolve(type, throwIfNotFound);\n  }\n\n  private get _compiler(): Compiler { return this._injector.get(Compiler); }\n\n  private _clearCacheFor(component: Type<any>) { this._compiler.clearCacheFor(component); }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Injector, },\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PipeResolver} from '@angular/compiler';\nimport {Compiler, Injectable, Injector, Pipe, Type} from '@angular/core';\n\n\nexport class MockPipeResolver extends PipeResolver {\n  private _pipes = new Map<Type<any>, Pipe>();\n\n  constructor(private _injector: Injector) { super(); }\n\n  private get _compiler(): Compiler { return this._injector.get(Compiler); }\n\n  private _clearCacheFor(pipe: Type<any>) { this._compiler.clearCacheFor(pipe); }\n\n  /**\n   * Overrides the {@link Pipe} for a pipe.\n   */\n  setPipe(type: Type<any>, metadata: Pipe): void {\n    this._pipes.set(type, metadata);\n    this._clearCacheFor(type);\n  }\n\n  /**\n   * Returns the {@link Pipe} for a pipe:\n   * - Set the {@link Pipe} to the overridden view when it exists or fallback to the\n   * default\n   * `PipeResolver`, see `setPipe`.\n   */\n  resolve(type: Type<any>, throwIfNotFound = true): Pipe {\n    let metadata = this._pipes.get(type);\n    if (!metadata) {\n      metadata = super.resolve(type, throwIfNotFound);\n    }\n    return metadata;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Injector, },\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"],"names":["removeMetadata","metadata","remove","references","removeObjects","Set","_loop_1","prop","removeValue","Array","forEach","value","add","_propHashKey","_loop_2","propValue","filter","has","undefined","addMetadata","addValue","concat","setMetadata","set","propName","replacer","key","_serializeReference","JSON","stringify","id","get","ref","_angular_core","ɵstringify","_nextReferenceId","_valueProps","obj","props","Object","keys","startsWith","push","proto","protoProp","desc","getOwnPropertyDescriptor","__extends","this","d","b","__","constructor","p","hasOwnProperty","prototype","create","MockSchemaRegistry","existingProperties","attrPropMapping","existingElements","invalidProperties","invalidAttributes","hasProperty","tagName","property","schemas","hasElement","schemaMetas","toLowerCase","allKnownElementNames","securityContext","selector","isAttribute","SecurityContext","NONE","getMappedPropName","attrName","getDefaultComponentElementName","validateProperty","name","indexOf","error","msg","validateAttribute","normalizeAnimationStyleProperty","normalizeAnimationStyleValue","camelCaseProp","userProvidedProp","val","MockDirectiveResolver","_super","_injector","_this","call","_providerOverrides","Map","_viewProviderOverrides","_views","defineProperty","Compiler","enumerable","configurable","_clearCacheFor","component","_compiler","clearCacheFor","resolve","type","throwIfNotFound","_directives","providerOverrides","viewProviderOverrides","providers","originalViewProviders","Component","viewProviders","view","animations","templateUrl","inlineTemplate","_inlineTemplates","template","inputs","outputs","host","exportAs","moduleId","queries","changeDetection","entryComponents","styles","styleUrls","encapsulation","interpolation","setDirective","setInlineTemplate","_angular_compiler","DirectiveResolver","decorators","Injectable","Injector","MockNgModuleResolver","NgModuleResolver","ctorParameters","MockPipeResolver","PipeResolver","_references","MetadataOverrider","overrideMetadata","metadataClass","oldMetadata","override","Error","TestingCompilerFactoryImpl","_compilerFactory","createTestingCompiler","options","compiler","createCompiler","TestingCompilerImpl","injector","CompilerFactory","_directiveResolver","_pipeResolver","_moduleResolver","compileModuleSync","moduleType","compileModuleAsync","compileModuleAndAllComponentsSync","compileModuleAndAllComponentsAsync","getNgContentSelectors","overrideModule","ngModule","setNgModule","_overrider","NgModule","overrideDirective","directive","Directive","overrideComponent","setPipe","pipe","Pipe","platformCoreDynamicTesting","createPlatformFactory","platformCoreDynamic","provide","COMPILER_OPTIONS","useValue","useExisting"],"mappings":"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"}